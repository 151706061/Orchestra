<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:orchestra="clr-namespace:Orchestra.Controls"
                    xmlns:fluent="urn:fluent-ribbon"
                    xmlns:converters="clr-namespace:Orchestra.Converters;assembly=Orchestra.Core"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <Style x:Key="RibbonBorderStyle" TargetType="Border">
        <Setter Property="Margin" Value="6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="InnerBackstageGridStyle" TargetType="Grid">
        <Setter Property="Margin" Value="36,16,36,36" />
    </Style>

    <Style x:Key="InnerBackstageTabItemGridStyle" TargetType="Grid">
        <Setter Property="Margin" Value="24,0,24,24" />
    </Style>

    <Style x:Key="RibbonBackstageHeaderLabelStyle" TargetType="Label">
        <Setter Property="Margin" Value="-8,0,6,16" />
        <Setter Property="FontSize" Value="40" />
        <Setter Property="FontWeight" Value="Light" />
    </Style>

    <Style x:Key="RibbonBackstageSubHeaderLabelStyle" TargetType="Label">
        <Setter Property="Margin" Value="0,0,6,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="RibbonBackstageTabItemHeaderLabelStyle" TargetType="Label">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="RibbonBackstageTabItemHeaderImageStyle" TargetType="Image">
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--<Style TargetType="{x:Type fluent:Button}" x:Key="ButtonBackstageStyle">

        <Setter Property="Height" Value="81"/>
        <Setter Property="Width" Value="85"/>
    </Style>-->

    <Style x:Key="NeutralGalleryItemStyle" TargetType="{x:Type fluent:GalleryItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluent:GalleryItem}">
                    <Grid Background="{DynamicResource TransparentBrush}">
                        <Border x:Name="hoverBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.12" />
                            </Border.Background>
                        </Border>
                        <Border x:Name="selectedBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.2" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" />
                        <Border x:Name="pressedBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.3" />
                            </Border.Background>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="pressedBorder" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <ControlTemplate x:Key="RibbonBackstageButtonControlTemplate" TargetType="{x:Type orchestra:RibbonBackstageButton}">
        <Grid x:Name="grid">
            <Border x:Name="border" BorderThickness="{TemplateBinding ShowBorder, Converter={converters:BooleanToThicknessConverter}}" Margin="0" Background="Transparent" BorderBrush="LightGray">
                <ContentPresenter x:Name="contentPresenter" ContentSource="Content" SnapsToDevicePixels="True"/>
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                <Setter Property="Effect" TargetName="contentPresenter">
                    <Setter.Value>
                        <fluent:GrayscaleEffect/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" TargetName="border" Value="#FFC8C8C9"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BackstageControlHoverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BackstageControlActiveBorderBrush}" />
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type orchestra:RibbonBackstageButton}">
        <Setter Property="Template" Value="{DynamicResource RibbonBackstageButtonControlTemplate}"/>
        <Setter Property="Height" Value="NaN" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="AutoHidingRibbonBackstageButtonStyle" TargetType="{x:Type orchestra:RibbonBackstageButton}" BasedOn="{StaticResource {x:Type orchestra:RibbonBackstageButton}}">
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type orchestra:RibbonBackstageButton}}, Path=IsMouseOver}" Value="true">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type orchestra:RibbonBackstageTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type orchestra:RibbonBackstageTabItem}">
                    <Grid Background="#00000000" Margin="0,3">
                        <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Margin="0" CornerRadius="3" Background="{DynamicResource TransparentBrush}">
                            <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
                                <ContentPresenter Margin="5,5,50,5" ContentSource="Header" />
                            </Border>
                        </Border>
                        <Path x:Name="path" Data="M1,0L0,1 1,2" Fill="#FFF4F4F5" HorizontalAlignment="Right" Height="11" Margin="0,0,-1,0" StrokeStartLineCap="Flat" Stretch="Fill" StrokeEndLineCap="Flat" Stroke="{DynamicResource RibbonTopBorderBrush}" StrokeThickness="1" StrokeMiterLimit="10" StrokeLineJoin="Miter" VerticalAlignment="Center" Width="6" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="path" Value="Visible"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type orchestra:RibbonBackstageTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type orchestra:RibbonBackstageTabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="0,0,1,0" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Offset="1" Color="#00D2D3D4" />
                                    <GradientStop Color="#7FD2D3D4" />
                                    <GradientStop Color="#FFD2D3D4" Offset="0.246" />
                                    <GradientStop Color="#FFD2D3D4" Offset="0.797" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>

                        <StackPanel Grid.Column="0" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Top" IsItemsHost="True" />
                        <Grid Grid.Column="1" Margin="18,0,36,36" >
                            <ContentPresenter x:Name="PART_SelectedContentHost" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type fluent:SplitButton}">
        <Setter Property="ClosePopupOnMouseDown" Value="True" />
    </Style>

    <Style TargetType="{x:Type fluent:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluent:ToggleButton}">
                    <Border x:Name="border"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource TransparentBrush}"
                                                    BorderBrush="{DynamicResource TransparentBrush}" Height="Auto"
                                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Height="Auto" HorizontalAlignment="Stretch">
                            <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
                                <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"
                                                                          Width="32" Margin="2" SnapsToDevicePixels="True"/>
                                <fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" 
                                                                             Style="{DynamicResource TwoLineLabelStyle}" 
                                                                             HorizontalAlignment="Stretch" 
                                                                             VerticalAlignment="Stretch" Margin="2,-3,2,1"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-2,2,2"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,2,2,2"/>
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonCheckedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonCheckedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5"/>
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <fluent:GrayscaleEffect/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
