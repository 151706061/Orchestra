<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:orchestra="clr-namespace:Orchestra.Controls"
                    xmlns:fluent="urn:fluent-ribbon"
                    xmlns:converters="clr-namespace:Orchestra.Converters;assembly=Orchestra.Core"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <!--<Style TargetType="{x:Type fluent:Button}" BasedOn="{StaticResource {x:Type fluent:Button}}">
        <Setter Property="MinWidth" Value="50" />
    </Style>

    <Style TargetType="{x:Type fluent:SplitButton}" BasedOn="{StaticResource {x:Type fluent:SplitButton}}">
        <Setter Property="MinWidth" Value="50" />
    </Style>

    <Style TargetType="{x:Type fluent:DropDownButton}" BasedOn="{StaticResource {x:Type fluent:DropDownButton}}">
        <Setter Property="MinWidth" Value="50" />
    </Style>-->

    <Style x:Key="RibbonBorderStyle" TargetType="Border">
        <Setter Property="Margin" Value="6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="InnerBackstageGridStyle" TargetType="Grid">
        <Setter Property="Margin" Value="36,16,36,36" />
    </Style>

    <Style x:Key="InnerBackstageTabItemGridStyle" TargetType="Grid">
        <Setter Property="Margin" Value="24,0,24,24" />
    </Style>

    <Style x:Key="RibbonBackstageHeaderLabelStyle" TargetType="Label">
        <Setter Property="Margin" Value="-8,0,6,16" />
        <Setter Property="FontSize" Value="40" />
        <Setter Property="FontWeight" Value="Light" />
    </Style>

    <Style x:Key="RibbonBackstageSubHeaderLabelStyle" TargetType="Label">
        <Setter Property="Margin" Value="0,0,6,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="RibbonBackstageTabItemHeaderLabelStyle" TargetType="Label">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="RibbonBackstageTabItemHeaderImageStyle" TargetType="Image">
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--<Style TargetType="{x:Type fluent:Button}" x:Key="ButtonBackstageStyle">

        <Setter Property="Height" Value="81"/>
        <Setter Property="Width" Value="85"/>
    </Style>-->

    <Style x:Key="NeutralGalleryItemStyle" TargetType="{x:Type fluent:GalleryItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluent:GalleryItem}">
                    <Grid Background="{DynamicResource TransparentBrush}">
                        <Border x:Name="hoverBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.12" />
                            </Border.Background>
                        </Border>
                        <Border x:Name="selectedBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.2" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" />
                        <Border x:Name="pressedBorder" d:LayoutOverrides="Width, Height" Visibility="Collapsed">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource {x:Static fluent:MetroColors.ThemeColorKey}}" Opacity="0.3" />
                            </Border.Background>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="pressedBorder" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <ControlTemplate x:Key="RibbonBackstageButtonControlTemplate" TargetType="{x:Type orchestra:RibbonBackstageButton}">
        <Grid x:Name="grid">
            <Border x:Name="border" BorderThickness="{TemplateBinding ShowBorder, Converter={converters:BooleanToThicknessConverter}}" Margin="0" Background="Transparent" BorderBrush="LightGray">
                <ContentPresenter x:Name="contentPresenter" ContentSource="Content" SnapsToDevicePixels="True"/>
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                <Setter Property="Effect" TargetName="contentPresenter">
                    <Setter.Value>
                        <fluent:GrayscaleEffect/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" TargetName="border" Value="#FFC8C8C9"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BackstageControlHoverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BackstageControlActiveBorderBrush}" />
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type orchestra:RibbonBackstageButton}">
        <Setter Property="Template" Value="{DynamicResource RibbonBackstageButtonControlTemplate}"/>
        <Setter Property="Height" Value="NaN" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="AutoHidingRibbonBackstageButtonStyle" TargetType="{x:Type orchestra:RibbonBackstageButton}" BasedOn="{StaticResource {x:Type orchestra:RibbonBackstageButton}}">
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type orchestra:RibbonBackstageButton}}, Path=IsMouseOver}" Value="true">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type orchestra:RibbonBackstageTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type orchestra:RibbonBackstageTabItem}">
                    <Grid Background="#00000000" Margin="0,3">
                        <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Margin="0" CornerRadius="3" Background="{DynamicResource TransparentBrush}">
                            <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" CornerRadius="2" Background="{DynamicResource TransparentBrush}">
                                <ContentPresenter Margin="5,5,50,5" ContentSource="Header" />
                            </Border>
                        </Border>
                        <Path x:Name="path" Data="M1,0L0,1 1,2" Fill="#FFF4F4F5" HorizontalAlignment="Right" Height="11" Margin="0,0,-1,0" StrokeStartLineCap="Flat" Stretch="Fill" StrokeEndLineCap="Flat" Stroke="{DynamicResource RibbonTopBorderBrush}" StrokeThickness="1" StrokeMiterLimit="10" StrokeLineJoin="Miter" VerticalAlignment="Center" Width="6" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="path" Value="Visible"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type orchestra:RibbonBackstageTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type orchestra:RibbonBackstageTabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="0,0,1,0" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Offset="1" Color="#00D2D3D4" />
                                    <GradientStop Color="#7FD2D3D4" />
                                    <GradientStop Color="#FFD2D3D4" Offset="0.246" />
                                    <GradientStop Color="#FFD2D3D4" Offset="0.797" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>

                        <StackPanel Grid.Column="0" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Top" IsItemsHost="True" />
                        <Grid Grid.Column="1" Margin="18,0,36,36" >
                            <ContentPresenter x:Name="PART_SelectedContentHost" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Ribbon Tab Item-->
    <ControlTemplate TargetType="{x:Type fluent:RibbonTabItem}" x:Key="RibbonTabItemControlTemplate">
        <Grid x:Name="grid" Background="#00000000" Height="24" VerticalAlignment="Top" Margin="0,7,0,0">
            <Border x:Name="border3" Margin="0,0,0,1" Grid.ColumnSpan="2">
                <Border x:Name="border5"
                        Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}"
                        BorderThickness="0,0,0,0" Margin="0">
                    <Border.OpacityMask>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#16000000" Offset="0" />
                            <GradientStop Color="#16000000" Offset="1" />
                        </LinearGradientBrush>
                    </Border.OpacityMask>
                </Border>
            </Border>
            <Grid x:Name="selectedGrid" Visibility="Collapsed" Margin="0" Grid.ColumnSpan="1">
                <Rectangle x:Name="rectangle" Fill="{DynamicResource ActiveTabBackgroundBrush}" StrokeThickness="0"
                           Margin="0" VerticalAlignment="Bottom" Height="1" />
                <Rectangle x:Name="rectangle1" Fill="{DynamicResource ActiveTabBackgroundBrush}"
                           StrokeThickness="0" Margin="1.8,0"
                           VerticalAlignment="Bottom"
                           Height="1.2" />
                <Rectangle x:Name="rectangle2"
                           Fill="{DynamicResource ActiveTabBackgroundBrush}"
                           StrokeThickness="0"
                           Margin="2,0"
                           VerticalAlignment="Bottom"
                           Height="2" />
                <Border x:Name="border" Margin="1,0,1,2" BorderBrush="{DynamicResource RibbonTopBorderBrush}"
                        BorderThickness="1,1,1,0"
                        VerticalAlignment="Stretch" Background="{DynamicResource ActiveTabBackgroundBrush}">
                    <Border x:Name="border_Copy3"
                            Margin="0"
                            BorderThickness="1,1,1,0"
                            VerticalAlignment="Stretch"
                            CornerRadius="2,2,0,0"
                            BorderBrush="{DynamicResource ActiveTabBackgroundBrush}">
                    </Border>
                </Border>
                <!--<Border x:Name="border1" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Bottom" Width="2" Height="2"
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,1,1"/>-->
                <Border x:Name="border1" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Bottom" Width="2"
                        Height="2"
                        BorderBrush="{DynamicResource RibbonTopBorderBrush}" BorderThickness="0,0,1,1" />
                <Border x:Name="border2" HorizontalAlignment="Right" Margin="0" VerticalAlignment="Bottom" Width="2"
                        Height="2"
                        BorderBrush="{DynamicResource RibbonTopBorderBrush}" BorderThickness="1,0,0,1" />
            </Grid>
            <Grid x:Name="focusedGrid" Margin="0" Visibility="Collapsed" Grid.ColumnSpan="1">
                <Grid.OpacityMask> 
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="White" Offset="0" />
                        <GradientStop Offset="1" Color="#19FFFFFF" />
                    </LinearGradientBrush>
                </Grid.OpacityMask>
                <Border x:Name="border_Copy5"
                        Margin="1,0,1,1"
                        BorderThickness="1,1,1,0"
                        VerticalAlignment="Stretch"
                        CornerRadius="2,2,0,0"
                        Background="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                        BorderBrush="{DynamicResource ButtonHoverOuterBorderBrush}">
                    <Border x:Name="border_Copy6"
                            Margin="0"
                            BorderBrush="{DynamicResource ButtonHoverInnerBorderBrush}"
                            BorderThickness="1,1,1,0"
                            VerticalAlignment="Stretch"
                            CornerRadius="2,2,0,0"
                            Background="{DynamicResource ButtonHoverInnerBackgroundBrush}" />
                </Border>
            </Grid>
            <Border x:Name="PART_ContentContainer"
                    HorizontalAlignment="Stretch"
                    Margin="6,2,4,0"
                    VerticalAlignment="Stretch"
                    Padding="15,0,0,0"
                    Grid.ColumnSpan="1">
                <!--<ContentPresenter x:Name="contentPresenter" ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" Height="Auto"/>-->
                <Label x:Name="contentPresenter"
                       AutomationProperties.Name="{TemplateBinding Header}"
                       AutomationProperties.AutomationId="{TemplateBinding Name}"
                       Content="{TemplateBinding Header}"
                       Margin="0, -4, 0,-1"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Height="Auto" />
            </Border>
            <Grid x:Name="separatorGrid"
                  Margin="0"
                  Visibility="Collapsed"
                  HorizontalAlignment="Right"
                  Width="1"
                  Grid.Column="1">
                <Rectangle x:Name="separatorRectangle1"
                           Fill="{DynamicResource RibbonTopBorderBrush}"
                           Stroke="{DynamicResource RibbonTopBorderBrush}"
                           Margin="0"
                           Width="1">
                </Rectangle>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasRightGroupBorder" Value="False" />
                    <Condition Property="HasLeftGroupBorder" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="border5" Value="2,0,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasLeftGroupBorder" Value="False" />
                    <Condition Property="HasRightGroupBorder" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="border5" Value="0,0,2,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasLeftGroupBorder" Value="False" />
                    <Condition Property="HasRightGroupBorder" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="border5" Value="0,0,0,0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasLeftGroupBorder" Value="True" />
                    <Condition Property="HasRightGroupBorder" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="border5" Value="2,0,2,0" />
            </MultiTrigger>
            <Trigger Property="Group" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="border3" Value="Collapsed" />
                <Setter Property="Margin" TargetName="separatorGrid" Value="-1,0,0,1" />
                <Setter Property="Visibility" TargetName="border_Copy3" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Selector.IsSelected" Value="True" />
                    <Condition Property="IsMinimized" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="selectedGrid" Value="Visible" />
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{Binding Group.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Selector.IsSelected" Value="True" />
                    <Condition Property="IsMinimized" Value="False" />
                    <Condition Property="Group" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="selectedGrid" Value="Visible" />
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{DynamicResource RibbonThemeColorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{Binding Group.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Group" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{DynamicResource RibbonThemeColorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Selector.IsSelected" Value="False" />
                    <Condition Property="IsMinimized" Value="False" />
                    <Condition Property="Group" Value="{x:Null}" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{DynamicResource RibbonThemeColorBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Selector.IsSelected" Value="True" />
                    <Condition Property="IsMinimized" Value="True" />
                    <Condition Property="IsOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="selectedGrid" Value="Visible" />
                <Setter Property="Background" TargetName="grid" Value="#00000000" />
                <Setter Property="Foreground" TargetName="contentPresenter" Value="{Binding Group.Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
            </MultiTrigger>
            <Trigger Property="IsSeparatorVisible" Value="True">
                <Setter Property="Visibility" TargetName="separatorGrid" Value="Visible" />
                <Setter Property="Margin" TargetName="PART_ContentContainer" Value="6,2,6,0" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--RibbonButton-->    
    <ControlTemplate x:Key="RibbonButtonControlTemplate" TargetType="{x:Type fluent:Button}">
        <Border x:Name="border" Background="{DynamicResource TransparentBrush}"
                Margin="2,0,2,0"
                BorderBrush="{DynamicResource TransparentBrush}"
                Height="Auto"
                HorizontalAlignment="Left"
                VerticalAlignment="Stretch">
            <Grid Height="Auto">
                <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical" d:LayoutOverrides="Width, Height">
                    <ContentPresenter x:Name="iconImage"
                                      HorizontalAlignment="Center"
                                      Height="32" VerticalAlignment="Center" 
                                      Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"
                                      Width="32" 
                                      Margin="3,2,3,1" 
                                      SnapsToDevicePixels="True"/>
                    <fluent:TwoLineLabel x:Name="controlLabel"
                                         Text="{TemplateBinding Header}" 
                                         Style="{DynamicResource TwoLineLabelStyle}" 
                                         HorizontalAlignment="Stretch"
                                         VerticalAlignment="Center"
                                         Margin="2,-1,2,0"/>
                </StackPanel>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                <Setter Property="Width" TargetName="iconImage" Value="16"/>
                <Setter Property="Height" TargetName="iconImage" Value="16"/>
                <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
                <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                <Setter Property="Width" TargetName="iconImage" Value="16"/>
                <Setter Property="Height" TargetName="iconImage" Value="16"/>
                <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5"/>
                <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <fluent:GrayscaleEffect/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Ribbon Split Button-->
    <!--<Style TargetType="{x:Type fluent:SplitButton}">
        <Setter Property="ClosePopupOnMouseDown" Value="True" />
    </Style>-->
    <ControlTemplate x:Key="RibbonSplitButtonControlTemplate" TargetType="{x:Type fluent:SplitButton}">
        <ControlTemplate.Resources>
            <Style TargetType="{x:Type Separator}" />
        </ControlTemplate.Resources>
        <Grid>
            <Border BorderThickness="1"
                    Margin="2,0,2,0"
                    Name="PART_ButtonBorder"
                    BorderBrush="{DynamicResource TransparentBrush}"
                    Background="{DynamicResource TransparentBrush}">
                <StackPanel Orientation="Vertical"
                            Name="stackPanel">
                    <fluent:ToggleButton x:Name="PART_Button"
                                         Command="{TemplateBinding Command}"
                                         CommandParameter="{TemplateBinding CommandParameter}"
                                         CommandTarget="{TemplateBinding CommandTarget}"
                                         Margin="0,0,0,0"
                                         Height="Auto"
                                         Width="Auto"
                                         Style="{DynamicResource InnerButtonStyle}"
                                         LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"
                                         Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"
                                         IsEnabled="{TemplateBinding IsButtonEnabled}"
                                         Header="{TemplateBinding Header}"
                                         ToolTip="{TemplateBinding ToolTip}"
                                         IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                         IsDefinitive="{TemplateBinding IsDefinitive}"
                                         CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" />
                    <Border BorderThickness="0,1,0,0"
                            Name="downBorder"
                            BorderBrush="{DynamicResource TransparentBrush}"
                            Background="{DynamicResource TransparentBrush}"
                            Margin="0,0,0,0">
                        <Grid>
                            <fluent:TwoLineLabel x:Name="controlLabel"
                                                 Text="{TemplateBinding Header}"
                                                 Style="{DynamicResource TwoLineLabelStyle}"
                                                 HorizontalAlignment="Center"
                                                 VerticalAlignment="Center"
                                                 Margin="2,-2,2,2"
                                                 HasGlyph="{TemplateBinding HasTriangle}" />
                        </Grid>
                    </Border>
                </StackPanel>
            </Border>
            <Popup x:Name="PART_Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide"
                   Margin="0,0,-4,0"
                   VerticalAlignment="Top"
                   Grid.ColumnSpan="2">
                <Grid Name="DropDown"
                      SnapsToDevicePixels="True"
                      Margin="0"
                      VerticalAlignment="Top">
                    <Border x:Name="PART_DropDownBorder"
                            MinWidth="{TemplateBinding ActualWidth}"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource ContextMenuBarBackgroundBrush}"
                            BorderBrush="{DynamicResource ContextMenuBarBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="1"
                            d:LayoutOverrides="Width, Height"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Top">
                        <Grid Width="Auto"
                              Height="Auto"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Top">
                            <Border VerticalAlignment="Top"
                                    Width="Auto"
                                    Height="Auto"
                                    BorderBrush="{DynamicResource ContextMenuBarBackgroundBrush}"
                                    BorderThickness="1" />
                            <Grid Margin="1"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Top">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_ScrollViewer"
                                              Style="{DynamicResource MenuScrollViewer}"
                                              Margin="1"
                                              MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                              SnapsToDevicePixels="True"
                                              ScrollViewer.VerticalScrollBarVisibility="Auto"
                                              ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                                    <StackPanel x:Name="PART_MenuPanel"
                                                Orientation="Vertical"
                                                IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                                <Border x:Name="resizeBorder"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Top"
                                        Height="11"
                                        BorderBrush="{DynamicResource ContextMenuBarResizeBorderBrush}"
                                        BorderThickness="0,1,0,0"
                                        Grid.Row="1"
                                        CornerRadius="0,0,1,1"
                                        Background="{DynamicResource ContextMenuBarResizeBackgoundBrush}">
                                    <Grid>
                                        <Thumb x:Name="PART_ResizeVerticalThumb"
                                               HorizontalAlignment="Stretch"
                                               Margin="0,0,0,-90"
                                               Width="Auto"
                                               Height="10"
                                               VerticalAlignment="Top"
                                               Cursor="SizeNS"
                                               Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                        <Thumb x:Name="PART_ResizeBothThumb"
                                               HorizontalAlignment="Right"
                                               Margin="0,0,0,-90"
                                               Width="10"
                                               Height="10"
                                               VerticalAlignment="Top"
                                               Cursor="SizeNWSE"
                                               Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                    </Grid>
                                </Border>
                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ResizeMode" Value="None">
                <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="Both">
                <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="Vertical">
                <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush"
                        TargetName="PART_ButtonBorder"
                        Value="{DynamicResource ButtonPressedOuterBorderBrush}" />
                <Setter Property="Background"
                        TargetName="PART_ButtonBorder"
                        Value="{DynamicResource ButtonPressedInnerBorderBrush}" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Size" TargetName="PART_Button" Value="Small" />
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                <Setter Property="Width" TargetName="controlLabel" Value="10" />
                <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                <Setter Property="Text" TargetName="controlLabel" Value="" />
                <Setter Property="Margin" TargetName="downBorder" Value="0" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Size" TargetName="PART_Button" Value="Middle" />
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                <Setter Property="Width" TargetName="controlLabel" Value="10" />
                <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                <Setter Property="Text" TargetName="controlLabel" Value="" />
                <Setter Property="Margin" TargetName="downBorder" Value="0" />
            </Trigger>

            <Trigger Property="IsButtonEnabled" Value="False">
                <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
                <Setter Property="Opacity" TargetName="controlLabel" Value="0.5" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}" />
                <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonPressedInnerBorderBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverInnerBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" SourceName="downBorder" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverInnerBorderBrush}" />
                <Setter Property="Background" TargetName="downBorder" Value="{DynamicResource ButtonHoverOuterBorderBrush}" />
                <Setter Property="BorderBrush" TargetName="downBorder" Value="{DynamicResource ButtonHoverOuterBorderBrush}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Ribbon Toggle Button-->
    <Style TargetType="{x:Type fluent:ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fluent:ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" 
                            Margin="2,0,2,2"
                            Background="{DynamicResource TransparentBrush}" 
                            BorderBrush="{DynamicResource TransparentBrush}" 
                            Height="Auto" 
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                        <Grid Height="Auto" HorizontalAlignment="Stretch">
                            <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
                                <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center"
                                                  Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"
                                                  Width="32" Margin="2 1 2 0" SnapsToDevicePixels="True"/>
                                <fluent:TwoLineLabel x:Name="controlLabel"
                                                     Text="{TemplateBinding Header}" 
                                                     Style="{DynamicResource TwoLineLabelStyle}" 
                                                     HorizontalAlignment="Stretch"  
                                                     VerticalAlignment="Stretch" Margin="2,0,2,0"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-2,2,2"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,2,2,2"/>
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static fluent:StaticConverters.ObjectToImageConverter}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonCheckedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonCheckedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5"/>
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <fluent:GrayscaleEffect/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
